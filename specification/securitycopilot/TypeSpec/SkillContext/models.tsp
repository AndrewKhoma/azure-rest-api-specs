import "@typespec/rest";
import "@typespec/http";
import "../SharedModels.tsp";
import "../SharedEnums.tsp";

using TypeSpec.Http;
using TypeSpec.Rest;

namespace SkillContext;

@doc("SkillContext object containing properties of the current session relevant to the invoked skill")
model SkillContextResponse {
  @doc("Skill descriptor containing attributes that describe a skill (i.e. Inputs required to execute the skill)")
  descriptor: SkillDescriptor;

  @doc("SkillContext Id")
  id: string;

  @doc("Array of feature flags")
  featureFlags: Array<string>;

  @doc("Skill Variable Collection")
  inputs: Record<SkillVariable>;

  @doc("Additional skill specific settings")
  properties: Record<string>;

  @doc("TODO")
  startTime: utcDateTime;

  @doc("Tenant id of tenant in which skill invocation occured")
  tenantId: string;

  @doc("User id of user that invoked the skill")
  userId: string;
}

@doc("Skill Variable")
model SkillVariable {
  @doc("Skill variable type")
  type?: string;

  @doc("Skill variable value")
  value?: string;

  @doc("Skill variable value is stored as json document")
  valueStoredAsJson: boolean;
}

@doc("Invoke skill request including necessary inputs for invoking a skill")
model InvokeSkillRequest {
  @doc("Name of skillset in which desired skill to invoke resides")
  skillsetName?: string;

  @doc("Name of skill to be invoked")
  skillName: string;

  @doc("Skill inputs")
  inputs: Record<SkillVariable> | null;
}

@doc("Skill variable parent entity adding additional attribute 'skillsource' to provide visibility to users as to what data/information was used in generating the output of a skill")
model OutputSkillVariable extends SkillVariable {
  @doc("Array of cited sources that were fetched by a skill and that impacted the output of the skill evaluation")
  sources: Array<SkillSource> | null;
}

@doc("Source that is fetched during the evaluation of a skill. Provides visibility to users as to what data/information was used in generating the output of a skill")
model SkillSource {
  @doc("User friendly name for the information source")
  displayName: string;

  @doc("Information source content (i.e. URL to article)")
  sourceContent: string;

  @doc("The source type (i.e. URI)")
  sourceType: SkillSourceType;

  @doc("Source data serialized as string")
  sourceSerializedData?: string | null;
}

@doc("The prompt history of the current session")
model PromptHistoryResponse {
  @doc("List of prompts that have been evaluated in the current session")
  prompts: Array<SessionPrompt>;
}

@doc("A record for a prompt and response used in tracking session prompt history")
model SessionPrompt {
  @doc("The content of the prompt")
  prompt: string;

  @doc("Prompt response returned by the prompt evaluation")
  response: string | null;
}

@doc("The progress message to log during a skill invocation")
model LogProgressRequest {
  @doc("Log level")
  level?: ProgressLogLevel;

  @doc("Log message")
  message: string;
}

@doc("Auth Details")
model AuthDetails {
  @doc("Auth Location")
  authLocation: AuthLocationEnum;

  @doc("Auth Info")
  authInfo: Record<string>;
}

@doc("TokenCredentialRequest")
model GetTokenCredentialRequest {
  @doc("Scopes")
  scopes: Array<string>;

  @doc("TokenCredential Type")
  tokenCredentialType: TokenCredentialEnum = TokenCredentialEnum.None;

  @doc("TenantId")
  tenantId?: string | null;
}

@doc("AccessToken")
model AccessToken {
  @doc("Token string")
  token: string;

  @doc("Expiry time")
  expiresOn: offsetDateTime;
}

@doc("GetInputRequest")
model GetInputRequest {
  @doc("Input Name")
  inputName: string;

  @doc("Default value for the input")
  defaultValue?: SkillVariable | null;
}

@doc("SetInputRequest")
model SetInputRequest {
  @doc("Input Name")
  inputName: string;

  @doc("Default value for the input")
  defaultValue?: SkillVariable | null;
}

@doc("AddSourcesRequest")
model AddSourcesRequest {
  @doc("List of SkillSource")
  sources: Array<SkillSource>;
}